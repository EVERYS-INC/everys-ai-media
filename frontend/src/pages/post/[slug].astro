---
import ArticleLayout from "../../layouts/ArticleLayout.astro";
import { marked } from 'marked';

export async function getStaticPaths() {
  const strapiUrl = import.meta.env.STRAPI_URL;
  if (!strapiUrl) {
    console.error("STRAPI_URL is not defined in environment variables");
    return [];
  }

  try {
    const response = await fetch(`${strapiUrl}/api/posts?populate=*`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const result = await response.json();

    if (!result.data || !Array.isArray(result.data)) {
      console.error("Unexpected API response structure:", result);
      return [];
    }

    return result.data.map((post) => ({
      params: { slug: post.attributes.slug },
      props: { post },
    }));
  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    return [];
  }
}

const { post } = Astro.props;

// markedの設定をカスタマイズ
marked.setOptions({
  highlight: function(code, lang) {
    return `<pre><code class="language-${lang}">${code}</code></pre>`;
  }
});

const content = post?.attributes?.content ? marked(post.attributes.content) : '';

// 最新の記事を取得（最新5件）
const strapiUrl = import.meta.env.STRAPI_URL;
let recentPosts = [];
try {
  const recentPostsResponse = await fetch(
    `${strapiUrl}/api/posts?sort[0]=createdAt:desc&pagination[limit]=5&fields[0]=title&fields[1]=slug`
  );
  if (!recentPostsResponse.ok) {
    throw new Error(`HTTP error! status: ${recentPostsResponse.status}`);
  }
  const recentPostsData = await recentPostsResponse.json();
  recentPosts = recentPostsData.data || [];
} catch (error) {
  console.error("Error fetching recent posts:", error);
}
---

<ArticleLayout 
  title={post?.attributes?.title || 'No Title'}
  recentPosts={recentPosts}
>
  <article class="prose lg:prose-xl">
    <h1 class="text-3xl font-bold mb-4">{post?.attributes?.title || 'No Title'}</h1>
    <div set:html={content} />
  </article>
</ArticleLayout>